name: Build and publish a Docker image to ghcr.io
on:

  # publish on releases, e.g. v2.1.13 (image tagged as "2.1.13" - "v" prefix is removed)
  release:
    types: [ published ]

  # publish on pushes to the main branch (image tagged as "latest")
  push:
    branches:
      - main

jobs:
  docker_publish:
    runs-on: "ubuntu-20.04"

    steps:
      - uses: actions/checkout@v2

      - name: set lower case owner name
        run: |
          echo "REPO_LC=${REPO,,}" >>${GITHUB_ENV}
        env:
          REPO: '${{ github.repository }}'

      # https://github.com/marketplace/actions/push-to-ghcr
      - name: Build and publish a Docker image for ${{ github.repository }}
        uses: macbre/push-to-ghcr@master
        with:
          image_name: ${{ env.REPO_LC }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          # optionally push to the Docker Hub (docker.io)
          # docker_io_token: ${{ secrets.DOCKER_IO_ACCESS_TOKEN }}  # see https://hub.docker.com/settings/security

      - id: findver
        continue-on-error: true
        uses: zwaldowski/match-label-action@v1
        with:
          allowed: major,minor,patch

      - id: patchbydefault
        run: |
          FINALBUMP="${OUTPUTBUMP:-patch}"
          echo -n "FINALBUMP=${FINALBUMP,,}" >>${GITHUB_ENV}
        env:
          OUTPUTBUMP: ${{ steps.findver.outputs.version }}

      - id: bumpver
        uses: zwaldowski/semver-release-action@v1
        continue-on-error: true
        with:
          bump: ${{ env.FINALBUMP }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          dry_run: true
          
      - id: finalver
        run: |
          FINALVER="${OUTPUTVER:-0.0.1}"
          echo -n "FINALVER=${FINALVER,,}" >>${GITHUB_ENV}
        env:
          OUTPUTVER: ${{ steps.bumpver.outputs.version }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ env.FINALVER }}
          release_name: Release ${{ github.ref }}
          body: |
            Automatic tarballs of debootstrab
          draft: false
          prerelease: false

      - name: allow arm64 execution
        run: |
          sudo apt update
          sudo apt install -y binfmt-support qemu-user-static

      - name: tarball min
        run: |
          mkdir -p artifacts
          mkdir -p target
          docker run -v ${PWD}/target:/target ${REPO_LC} -- min
          cd target
          sudo tar -jcvf ../artifacts/debian-bullseye-arm64.tar.bz2 .
          sudo chmod 644 ../artifacts/debian-bullseye-arm64.tar.bz2

      - name: Upload Release Asset min
        id: upload-release-asset-min 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: artifacts/debian-bullseye-arm64.tar.bz2
          asset_name: debian-bullseye-arm64.tar.bz2
          asset_content_type: application/x-tar

      - name: tarball wifi
        run: |
          mkdir -p artifacts
          mkdir -p target
          sudo rm -rf target/*
          docker run -v ${PWD}/target:/target ${REPO_LC} -- wifietc
          cd target
          sudo tar -jcvf ../artifacts/debian-bullseye-arm64-withwifi.tar.bz2 .
          sudo chmod 644 ../artifacts/debian-bullseye-arm64-withwifi.tar.bz2

      - name: Upload Release Asset wifi
        id: upload-release-asset-wifi 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: artifacts/debian-bullseye-arm64-withwifi.tar.bz2
          asset_name: debian-bullseye-arm64-withwifi.tar.bz2
          asset_content_type: application/x-tar

      - name: tarball full
        run: |
          mkdir -p artifacts
          mkdir -p target
          sudo rm -rf target/*
          docker run -v ${PWD}/target:/target ${REPO_LC} -- full
          cd target
          sudo tar -jcvf ../artifacts/debian-bullseye-arm64-full.tar.bz2 .
          sudo chmod 644 ../artifacts/debian-bullseye-arm64-full.tar.bz2

      - name: Upload Release Asset full
        id: upload-release-asset-full 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: artifacts/debian-bullseye-arm64-full.tar.bz2
          asset_name: debian-bullseye-arm64-full.tar.bz2
          asset_content_type: application/x-tar
